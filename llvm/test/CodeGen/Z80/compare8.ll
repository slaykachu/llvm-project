; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=z80 < %s | FileCheck %s --check-prefixes=Z80
; RUN: llc -mtriple=ez80-code16 < %s | FileCheck %s --check-prefixes=Z80-CODE16
; RUN: llc -mtriple=ez80 < %s | FileCheck %s --check-prefixes=EZ80

declare void @external()

define void @icmp.eq.i8(i8, i8) {
; Z80-LABEL: icmp.eq.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    cp a, l
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call z, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.eq.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    ld l, (ix + 6)
; Z80-CODE16-NEXT:    cp a, l
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call z, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.eq.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    cp a, l
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call z, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp eq i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.eq.i8.0(i8) {
; Z80-LABEL: icmp.eq.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    or a, a
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call z, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.eq.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call z, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.eq.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call z, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp eq i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.eq.i8.64(i8) {
; Z80-LABEL: icmp.eq.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 64
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call z, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.eq.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 64
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call z, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.eq.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 64
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call z, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp eq i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ne.i8(i8, i8) {
; Z80-LABEL: icmp.ne.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    cp a, l
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nz, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ne.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    ld l, (ix + 6)
; Z80-CODE16-NEXT:    cp a, l
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nz, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ne.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    cp a, l
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nz, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ne i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ne.i8.0(i8) {
; Z80-LABEL: icmp.ne.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    or a, a
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nz, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ne.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nz, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ne.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nz, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ne i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ne.i8.64(i8) {
; Z80-LABEL: icmp.ne.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 64
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nz, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ne.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 64
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nz, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ne.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 64
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nz, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ne i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ult.i8(i8, i8) {
; Z80-LABEL: icmp.ult.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    cp a, l
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ult.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    ld l, (ix + 6)
; Z80-CODE16-NEXT:    cp a, l
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ult.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    cp a, l
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ult i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ult.i8.0(i8) {
; Z80-LABEL: icmp.ult.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 0
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ult.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 0
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ult.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 0
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ult i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ult.i8.64(i8) {
; Z80-LABEL: icmp.ult.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 64
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ult.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 64
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ult.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 64
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ult i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ule.i8(i8, i8) {
; Z80-LABEL: icmp.ule.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld a, (ix + 6)
; Z80-NEXT:    cp a, l
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ule.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld l, (ix + 4)
; Z80-CODE16-NEXT:    ld a, (ix + 6)
; Z80-CODE16-NEXT:    cp a, l
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ule.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    cp a, l
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ule i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ule.i8.0(i8) {
; Z80-LABEL: icmp.ule.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 1
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ule.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 1
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ule.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 1
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ule i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ule.i8.64(i8) {
; Z80-LABEL: icmp.ule.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 65
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ule.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 65
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ule.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 65
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ule i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ugt.i8(i8, i8) {
; Z80-LABEL: icmp.ugt.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld a, (ix + 6)
; Z80-NEXT:    cp a, l
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ugt.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld l, (ix + 4)
; Z80-CODE16-NEXT:    ld a, (ix + 6)
; Z80-CODE16-NEXT:    cp a, l
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ugt.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    cp a, l
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ugt i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ugt.i8.0(i8) {
; Z80-LABEL: icmp.ugt.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 1
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ugt.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 1
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ugt.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 1
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ugt i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ugt.i8.64(i8) {
; Z80-LABEL: icmp.ugt.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 65
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ugt.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 65
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ugt.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 65
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ugt i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.uge.i8(i8, i8) {
; Z80-LABEL: icmp.uge.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    cp a, l
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.uge.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    ld l, (ix + 6)
; Z80-CODE16-NEXT:    cp a, l
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.uge.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    cp a, l
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp uge i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.uge.i8.0(i8) {
; Z80-LABEL: icmp.uge.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 0
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.uge.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 0
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.uge.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 0
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp uge i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.uge.i8.64(i8) {
; Z80-LABEL: icmp.uge.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    cp a, 64
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.uge.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    cp a, 64
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.uge.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    cp a, 64
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp uge i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.slt.i8(i8, i8) {
; Z80-LABEL: icmp.slt.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld a, (ix + 6)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, e
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.slt.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld l, (ix + 4)
; Z80-CODE16-NEXT:    ld a, (ix + 6)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    ld e, a
; Z80-CODE16-NEXT:    ld a, l
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, e
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.slt.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, e
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp slt i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.slt.i8.0(i8) {
; Z80-LABEL: icmp.slt.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -128
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.slt.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, -128
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.slt.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -128
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp slt i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.slt.i8.64(i8) {
; Z80-LABEL: icmp.slt.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -64
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.slt.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, -64
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.slt.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -64
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp slt i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sle.i8(i8, i8) {
; Z80-LABEL: icmp.sle.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, e
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sle.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    ld l, (ix + 6)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    ld e, a
; Z80-CODE16-NEXT:    ld a, l
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, e
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sle.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, e
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sle i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.sle.i8.0(i8) {
; Z80-LABEL: icmp.sle.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -127
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sle.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, -127
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sle.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -127
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sle i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sle.i8.64(i8) {
; Z80-LABEL: icmp.sle.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -63
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sle.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, -63
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sle.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -63
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sle i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sgt.i8(i8, i8) {
; Z80-LABEL: icmp.sgt.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, e
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sgt.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    ld l, (ix + 6)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    ld e, a
; Z80-CODE16-NEXT:    ld a, l
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, e
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sgt.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, e
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sgt i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.sgt.i8.0(i8) {
; Z80-LABEL: icmp.sgt.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -127
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sgt.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, -127
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sgt.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -127
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sgt i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sgt.i8.64(i8) {
; Z80-LABEL: icmp.sgt.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -63
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sgt.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, -63
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sgt.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -63
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sgt i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sge.i8(i8, i8) {
; Z80-LABEL: icmp.sge.i8:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld a, (ix + 6)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    ld e, a
; Z80-NEXT:    ld a, l
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, e
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sge.i8:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld l, (ix + 4)
; Z80-CODE16-NEXT:    ld a, (ix + 6)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    ld e, a
; Z80-CODE16-NEXT:    ld a, l
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, e
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sge.i8:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld a, (ix + 9)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    ld e, a
; EZ80-NEXT:    ld a, l
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, e
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sge i8 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.sge.i8.0(i8) {
; Z80-LABEL: icmp.sge.i8.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -128
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sge.i8.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, -128
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sge.i8.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -128
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sge i8 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sge.i8.64(i8) {
; Z80-LABEL: icmp.sge.i8.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld a, (ix + 4)
; Z80-NEXT:    add a, -128
; Z80-NEXT:    cp a, -64
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sge.i8.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld a, (ix + 4)
; Z80-CODE16-NEXT:    add a, -128
; Z80-CODE16-NEXT:    cp a, -64
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sge.i8.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld a, (ix + 6)
; EZ80-NEXT:    add a, -128
; EZ80-NEXT:    cp a, -64
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sge i8 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}
