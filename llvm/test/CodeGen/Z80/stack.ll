; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=z80 < %s | FileCheck %s --check-prefixes=Z80
; RUN: llc -mtriple=ez80-code16 < %s | FileCheck %s --check-prefixes=EZ80-CODE16
; RUN: llc -mtriple=ez80 < %s | FileCheck %s --check-prefixes=EZ80

@global = external global i8**

define void @arg.addr.no.fpe(i8** %0) "frame-pointer"="all" {
; Z80-LABEL: arg.addr.no.fpe:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld (_global), hl
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: arg.addr.no.fpe:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    ld hl, (ix + 4)
; EZ80-CODE16-NEXT:    ld (_global), hl
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: arg.addr.no.fpe:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld (_global), hl
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
1:
  store i8** %0, i8*** @global
  ret void
}

define void @arg.addr.fpe(i8** %0) "frame-pointer"="none" {
; Z80-LABEL: arg.addr.fpe:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    ld l, (iy + 2)
; Z80-NEXT:    ld h, (iy + 3)
; Z80-NEXT:    ld (_global), hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: arg.addr.fpe:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    ld hl, (iy + 2)
; EZ80-CODE16-NEXT:    ld (_global), hl
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: arg.addr.fpe:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    ld hl, (iy + 3)
; EZ80-NEXT:    ld (_global), hl
; EZ80-NEXT:    ret
1:
  store i8** %0, i8*** @global
  ret void
}

define void @local.addr.no.fpe() "frame-pointer"="all" {
; Z80-LABEL: local.addr.no.fpe:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld hl, -6
; Z80-NEXT:    add hl, sp
; Z80-NEXT:    ld sp, hl
; Z80-NEXT:    ld bc, -6
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, ixl
; Z80-NEXT:    ld d, ixh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (_global), hl
; Z80-NEXT:    ld sp, ix
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: local.addr.no.fpe:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    push ix
; EZ80-CODE16-NEXT:    ld ix, 0
; EZ80-CODE16-NEXT:    add ix, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    lea hl, ix + -2
; EZ80-CODE16-NEXT:    ld (_global), hl
; EZ80-CODE16-NEXT:    ld sp, ix
; EZ80-CODE16-NEXT:    pop ix
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: local.addr.no.fpe:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, ix + -3
; EZ80-NEXT:    ld (_global), hl
; EZ80-NEXT:    ld sp, ix
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
0:
  %1 = alloca i8*
  store i8** %1, i8*** @global
  ret void
}

define void @local.addr.fpe() "frame-pointer"="none" {
; Z80-LABEL: local.addr.fpe:
; Z80:       ; %bb.0:
; Z80-NEXT:    ld iy, 0
; Z80-NEXT:    add iy, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    push hl
; Z80-NEXT:    ld bc, -4
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    ex de, hl
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    ld (_global), hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    pop hl
; Z80-NEXT:    ret
;
; EZ80-CODE16-LABEL: local.addr.fpe:
; EZ80-CODE16:       ; %bb.0:
; EZ80-CODE16-NEXT:    ld iy, 0
; EZ80-CODE16-NEXT:    add iy, sp
; EZ80-CODE16-NEXT:    push hl
; EZ80-CODE16-NEXT:    lea hl, iy + -2
; EZ80-CODE16-NEXT:    ld (_global), hl
; EZ80-CODE16-NEXT:    pop hl
; EZ80-CODE16-NEXT:    ret
;
; EZ80-LABEL: local.addr.fpe:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    ld iy, 0
; EZ80-NEXT:    add iy, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    lea hl, iy + -3
; EZ80-NEXT:    ld (_global), hl
; EZ80-NEXT:    pop hl
; EZ80-NEXT:    ret
0:
  %1 = alloca i8*
  store i8** %1, i8*** @global
  ret void
}
