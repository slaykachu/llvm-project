; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=ez80 < %s | FileCheck %s --check-prefixes=EZ80

declare void @external()

define void @icmp.eq.i24(i24, i24) {
; EZ80-LABEL: icmp.eq.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call z, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp eq i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.eq.i24.0(i24) {
; EZ80-LABEL: icmp.eq.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, bc
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call z, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp eq i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.eq.i24.64(i24) {
; EZ80-LABEL: icmp.eq.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 64
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call z, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp eq i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ne.i24(i24, i24) {
; EZ80-LABEL: icmp.ne.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nz, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ne i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ne.i24.0(i24) {
; EZ80-LABEL: icmp.ne.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    add hl, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, bc
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nz, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ne i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ne.i24.64(i24) {
; EZ80-LABEL: icmp.ne.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 64
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nz, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ne i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ult.i24(i24, i24) {
; EZ80-LABEL: icmp.ult.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ult i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ult.i24.0(i24) {
; EZ80-LABEL: icmp.ult.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ult i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ult.i24.64(i24) {
; EZ80-LABEL: icmp.ult.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 64
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ult i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ule.i24(i24, i24) {
; EZ80-LABEL: icmp.ule.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ule i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ule.i24.0(i24) {
; EZ80-LABEL: icmp.ule.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 1
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ule i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ule.i24.64(i24) {
; EZ80-LABEL: icmp.ule.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 65
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ule i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ugt.i24(i24, i24) {
; EZ80-LABEL: icmp.ugt.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld de, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ugt i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ugt.i24.0(i24) {
; EZ80-LABEL: icmp.ugt.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 1
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ugt i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ugt.i24.64(i24) {
; EZ80-LABEL: icmp.ugt.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 65
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ugt i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.uge.i24(i24, i24) {
; EZ80-LABEL: icmp.uge.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, (ix + 9)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp uge i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.uge.i24.0(i24) {
; EZ80-LABEL: icmp.uge.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 0
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp uge i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.uge.i24.64(i24) {
; EZ80-LABEL: icmp.uge.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, 64
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp uge i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.slt.i24(i24, i24) {
; EZ80-LABEL: icmp.slt.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    lea de, iy + 0
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp slt i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.slt.i24.0(i24) {
; EZ80-LABEL: icmp.slt.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp slt i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.slt.i24.64(i24) {
; EZ80-LABEL: icmp.slt.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld de, -8388544
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp slt i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sle.i24(i24, i24) {
; EZ80-LABEL: icmp.sle.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    lea de, iy + 0
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sle i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.sle.i24.0(i24) {
; EZ80-LABEL: icmp.sle.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sle i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sle.i24.64(i24) {
; EZ80-LABEL: icmp.sle.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld de, -8388543
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sle i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sgt.i24(i24, i24) {
; EZ80-LABEL: icmp.sgt.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld iy, (ix + 6)
; EZ80-NEXT:    ld hl, (ix + 9)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    lea de, iy + 0
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sgt i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.sgt.i24.0(i24) {
; EZ80-LABEL: icmp.sgt.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    inc de
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sgt i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sgt.i24.64(i24) {
; EZ80-LABEL: icmp.sgt.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld de, -8388543
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sgt i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sge.i24(i24, i24) {
; EZ80-LABEL: icmp.sge.i24:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld iy, (ix + 9)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add iy, de
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    lea de, iy + 0
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sge i24 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.sge.i24.0(i24) {
; EZ80-LABEL: icmp.sge.i24.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sge i24 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sge.i24.64(i24) {
; EZ80-LABEL: icmp.sge.i24.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld hl, (ix + 6)
; EZ80-NEXT:    ld de, -8388608
; EZ80-NEXT:    add hl, de
; EZ80-NEXT:    ld de, -8388544
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sge i24 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}
