; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=z80 < %s | FileCheck %s --check-prefixes=Z80
; RUN: llc -mtriple=ez80-code16 < %s | FileCheck %s --check-prefixes=Z80-CODE16
; RUN: llc -mtriple=ez80 < %s | FileCheck %s --check-prefixes=EZ80

declare void @external()

define void @icmp.eq.i16(i16, i16) {
; Z80-LABEL: icmp.eq.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call z, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.eq.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, (ix + 6)
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call z, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.eq.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld d, (ix + 10)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call z, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp eq i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.eq.i16.0(i16) {
; Z80-LABEL: icmp.eq.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call z, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.eq.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    add hl, bc
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, bc
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call z, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.eq.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call z, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp eq i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.eq.i16.64(i16) {
; Z80-LABEL: icmp.eq.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 64
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call z, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.eq.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 64
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call z, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.eq.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 64
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call z, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp eq i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ne.i16(i16, i16) {
; Z80-LABEL: icmp.ne.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nz, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ne.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, (ix + 6)
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nz, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ne.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld d, (ix + 10)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nz, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ne i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ne.i16.0(i16) {
; Z80-LABEL: icmp.ne.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    add hl, bc
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, bc
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nz, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ne.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    add hl, bc
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, bc
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nz, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ne.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    add.sis hl, bc
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, bc
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nz, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ne i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ne.i16.64(i16) {
; Z80-LABEL: icmp.ne.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 64
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nz, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ne.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 64
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nz, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ne.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 64
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nz, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ne i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ult.i16(i16, i16) {
; Z80-LABEL: icmp.ult.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ult.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, (ix + 6)
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ult.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld d, (ix + 10)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ult i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ult.i16.0(i16) {
; Z80-LABEL: icmp.ult.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ult.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 0
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ult.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ult i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ult.i16.64(i16) {
; Z80-LABEL: icmp.ult.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 64
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ult.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 64
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ult.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 64
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ult i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ule.i16(i16, i16) {
; Z80-LABEL: icmp.ule.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ule.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld de, (ix + 4)
; Z80-CODE16-NEXT:    ld hl, (ix + 6)
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ule.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld e, (ix + 6)
; EZ80-NEXT:    ld d, (ix + 7)
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    ld h, (ix + 10)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ule i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ule.i16.0(i16) {
; Z80-LABEL: icmp.ule.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 1
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ule.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 1
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ule.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 1
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ule i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ule.i16.64(i16) {
; Z80-LABEL: icmp.ule.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 65
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ule.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 65
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ule.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 65
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ule i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ugt.i16(i16, i16) {
; Z80-LABEL: icmp.ugt.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld e, (ix + 4)
; Z80-NEXT:    ld d, (ix + 5)
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ugt.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld de, (ix + 4)
; Z80-CODE16-NEXT:    ld hl, (ix + 6)
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ugt.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld e, (ix + 6)
; EZ80-NEXT:    ld d, (ix + 7)
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    ld h, (ix + 10)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ugt i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.ugt.i16.0(i16) {
; Z80-LABEL: icmp.ugt.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 1
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ugt.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 1
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ugt.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 1
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ugt i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.ugt.i16.64(i16) {
; Z80-LABEL: icmp.ugt.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 65
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.ugt.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 65
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.ugt.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 65
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp ugt i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.uge.i16(i16, i16) {
; Z80-LABEL: icmp.uge.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld e, (ix + 6)
; Z80-NEXT:    ld d, (ix + 7)
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.uge.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, (ix + 6)
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.uge.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld e, (ix + 9)
; EZ80-NEXT:    ld d, (ix + 10)
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp uge i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.uge.i16.0(i16) {
; Z80-LABEL: icmp.uge.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 0
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.uge.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 0
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.uge.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 0
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp uge i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.uge.i16.64(i16) {
; Z80-LABEL: icmp.uge.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, 64
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.uge.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, 64
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.uge.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, 64
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp uge i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.slt.i16(i16, i16) {
; Z80-LABEL: icmp.slt.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add iy, de
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.slt.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld iy, (ix + 6)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add iy, de
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    lea de, iy + 0
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.slt.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    ld h, (ix + 10)
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis iy, de
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp slt i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.slt.i16.0(i16) {
; Z80-LABEL: icmp.slt.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add hl, de
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.slt.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.slt.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp slt i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.slt.i16.64(i16) {
; Z80-LABEL: icmp.slt.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld de, -32704
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.slt.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    ld de, -32704
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.slt.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld.sis de, -32704
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp slt i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sle.i16(i16, i16) {
; Z80-LABEL: icmp.sle.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add iy, de
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sle.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld iy, (ix + 4)
; Z80-CODE16-NEXT:    ld hl, (ix + 6)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add iy, de
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    lea de, iy + 0
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sle.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    ld h, (ix + 10)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis iy, de
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sle i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.sle.i16.0(i16) {
; Z80-LABEL: icmp.sle.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add hl, de
; Z80-NEXT:    inc de
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sle.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    inc de
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sle.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    inc.sis de
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sle i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sle.i16.64(i16) {
; Z80-LABEL: icmp.sle.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld de, -32703
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sle.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    ld de, -32703
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sle.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld.sis de, -32703
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sle i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sgt.i16(i16, i16) {
; Z80-LABEL: icmp.sgt.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add iy, de
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call c, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sgt.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld iy, (ix + 4)
; Z80-CODE16-NEXT:    ld hl, (ix + 6)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add iy, de
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    lea de, iy + 0
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call c, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sgt.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    ld h, (ix + 10)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis iy, de
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call c, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sgt i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.sgt.i16.0(i16) {
; Z80-LABEL: icmp.sgt.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add hl, de
; Z80-NEXT:    inc de
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sgt.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    inc de
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sgt.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    inc.sis de
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sgt i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sgt.i16.64(i16) {
; Z80-LABEL: icmp.sgt.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld de, -32703
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sgt.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    ld de, -32703
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sgt.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld.sis de, -32703
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sgt i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sge.i16(i16, i16) {
; Z80-LABEL: icmp.sge.i16:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    push hl
; Z80-NEXT:    ld l, (ix + 6)
; Z80-NEXT:    ld h, (ix + 7)
; Z80-NEXT:    ex (sp), hl
; Z80-NEXT:    pop iy
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add iy, de
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld e, iyl
; Z80-NEXT:    ld d, iyh
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sge.i16:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld iy, (ix + 6)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add iy, de
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    lea de, iy + 0
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sge.i16:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    push hl
; EZ80-NEXT:    ld l, (ix + 9)
; EZ80-NEXT:    ld h, (ix + 10)
; EZ80-NEXT:    ex (sp), hl
; EZ80-NEXT:    pop iy
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis iy, de
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld e, iyl
; EZ80-NEXT:    ld d, iyh
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sge i16 %0, %1
  br i1 %3, label %4, label %5
  call void @external()
  br label %5
  ret void
}

define void @icmp.sge.i16.0(i16) {
; Z80-LABEL: icmp.sge.i16.0:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add hl, de
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sge.i16.0:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sge.i16.0:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sge i16 %0, 0
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}

define void @icmp.sge.i16.64(i16) {
; Z80-LABEL: icmp.sge.i16.64:
; Z80:       ; %bb.0:
; Z80-NEXT:    push ix
; Z80-NEXT:    ld ix, 0
; Z80-NEXT:    add ix, sp
; Z80-NEXT:    ld l, (ix + 4)
; Z80-NEXT:    ld h, (ix + 5)
; Z80-NEXT:    ld de, -32768
; Z80-NEXT:    add hl, de
; Z80-NEXT:    ld de, -32704
; Z80-NEXT:    or a, a
; Z80-NEXT:    sbc hl, de
; Z80-NEXT:  ; %bb.1:
; Z80-NEXT:    call nc, _external
; Z80-NEXT:  ; %bb.2:
; Z80-NEXT:    pop ix
; Z80-NEXT:    ret
; Z80-NEXT:    section .text
;
; Z80-CODE16-LABEL: icmp.sge.i16.64:
; Z80-CODE16:       ; %bb.0:
; Z80-CODE16-NEXT:    push ix
; Z80-CODE16-NEXT:    ld ix, 0
; Z80-CODE16-NEXT:    add ix, sp
; Z80-CODE16-NEXT:    ld hl, (ix + 4)
; Z80-CODE16-NEXT:    ld de, -32768
; Z80-CODE16-NEXT:    add hl, de
; Z80-CODE16-NEXT:    ld de, -32704
; Z80-CODE16-NEXT:    or a, a
; Z80-CODE16-NEXT:    sbc hl, de
; Z80-CODE16-NEXT:  ; %bb.1:
; Z80-CODE16-NEXT:    call nc, _external
; Z80-CODE16-NEXT:  ; %bb.2:
; Z80-CODE16-NEXT:    pop ix
; Z80-CODE16-NEXT:    ret
; Z80-CODE16-NEXT:    section .text
;
; EZ80-LABEL: icmp.sge.i16.64:
; EZ80:       ; %bb.0:
; EZ80-NEXT:    push ix
; EZ80-NEXT:    ld ix, 0
; EZ80-NEXT:    add ix, sp
; EZ80-NEXT:    ld l, (ix + 6)
; EZ80-NEXT:    ld h, (ix + 7)
; EZ80-NEXT:    ld.sis de, -32768
; EZ80-NEXT:    add.sis hl, de
; EZ80-NEXT:    ld.sis de, -32704
; EZ80-NEXT:    or a, a
; EZ80-NEXT:    sbc.sis hl, de
; EZ80-NEXT:  ; %bb.1:
; EZ80-NEXT:    call nc, _external
; EZ80-NEXT:  ; %bb.2:
; EZ80-NEXT:    pop ix
; EZ80-NEXT:    ret
; EZ80-NEXT:    section .text
  icmp sge i16 %0, 64
  br i1 %2, label %3, label %4
  call void @external()
  br label %4
  ret void
}
